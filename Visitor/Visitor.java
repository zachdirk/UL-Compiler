package AST;
import Type.*;

public interface Visitor{
	public Type visit(AddExpression e);
	public Type visit(ArrayAssignment e);
	public Type visit(ArrayReference a);
	public Type visit(ArrayType t);
	public Type visit(AssignmentStatement s);
	public Type visit(Block e);
	public Type visit(BooleanLiteral e);
	public Type visit(BooleanType t);
	public Type visit(CharType t);
	public Type visit(CharacterLiteral e);
	public Type visit(EqualityExpression e);
	public Type visit(ExpressionStatement e);
	public Type visit(FloatLiteral e);
	public Type visit(FloatType t);
	public Type visit(FormalParameter p);
	public Type visit(FormalParameterList p);
	public Type visit(FunctionBody f);
	public Type visit(FunctionCall s);
	public Type visit(FunctionDeclaration f);
	public Type visit(Function f);
	public Type visit(Identifier id);
	public Type visit(IdentifierValue id);
	public Type visit(IfStatement s);
	public Type visit(IntegerLiteral i);
	public Type visit(IntegerType t);
	public Type visit(LessThanExpression e);
	public Type visit(MultExpression e);
	public Type visit(ParenExpression e);
	public Type visit(PrintStatement s);
	public Type visit(PrintLnStatement s);
	public Type visit(Program p);
	public Type visit(ReturnStatement s);
	public Type visit(StringLiteral s);
	public Type visit(StringType t);
	public Type visit(SubtractExpression s);
	public Type visit(VariableDeclaration s);
	public Type visit(VoidType t);
	public Type visit(WhileStatement s);
}
