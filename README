Submission for CSC435 Assignment 3 by Zachary Dirk.

Compile by using MAKE. I have not changed anything other than the name of the grammar file.
To evoke the compiler, use "java Compiler [filename]". This will always invoke the semantic/type checker as well and IR generation (but not IR output, see below).
To evoke the pretty printer, add the -pp flag e.g.: "java Compiler [filename] -pp"
You can redirect the pretty printer output to a file for easy comparison like so "java Compiler [filename] -pp > output.txt"
To evoke IR output you must add the -ir flag.
Example usage for IR output redirected to file: "java Compiler [filename] -ir > test.ir"

Notes for Assignment 2:
 - The error for the empty file reports both a SemanticException (from my Semantic checker) as well as an ANTLR error - I can't figure out how to disable the ANTLR error.
 - I have implemented "subtyping" for integers and floats in such a way that floats and integers can be used interchangeably. Because explicit casting doesn't exist, I have allowed for assigning floats to integers. As a result, test cases wSt_3.1.5_invalid.ul, wSt_3.1.6_invalid.ul, wSt_3.2.2.a_invalid.ul, and wSt_3.3.b_invalid.ul are actually all valid for me. In later assignments this will translate to floats being truncated to integers (e.g. int a = 3.5 -> a = 3).
 - I have added implicit type casting for string concatenation, meaning the following expressions are valid: 
	String + Int
	String + Float
	String + Boolean
	String + String (already valid by default)
I'm doing this asymetrically which means that the following are not valid:
	Int + String
	Float + String
	Boolean + String
Everything else is as specified in the assignment document.

Notes for Assignment 3:
 - Corrected a bug with Arrays that may or may not have been caught in Assignment 2 (regarding assignment to arrays specifically)
 - Float/Integer subtyping works exactly as described in the notes for assignment 2 with one exception: it does not work in function parameters. 
Meaning that function parameters must match exactly, you can't substitute a float for an int or vice versa (I am looking to fix this but it's not trivial).
 - Implicit type casting for string concatenation has not yet been implemented because there is no I2U or F2U etc operator in this IR that I can see in the specifications.
I will ask Jason about this if I can't figure it out because I'd still like to implement it. 
